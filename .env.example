# ==============================================================================
# Example environment variables for Public Detective.
#
# Instructions:
# 1. Copy this file to a new file named `.env` in the same directory.
# 2. Fill in the values for your specific environment.
#
# Note: Variables with default values are often for local development and may
# not need to be changed.
# ==============================================================================

# --- Synchronous Execution Configuration ---
# Forces asynchronous operations to run synchronously. This is useful for
# debugging and development but should be disabled in production.
# This can be overridden at runtime with the `--sync` CLI flag.
# Default: False
FORCE_SYNC=False

# --- Application Configuration ---
# Sets the logging level for the application.
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Default: INFO
LOG_LEVEL=INFO

# Comma-separated list of IBGE codes for the cities to be monitored.
# Example: [3550308, 3304557] for SÃ£o Paulo and Rio de Janeiro.
# Default: [3550308, 3304557]
TARGET_IBGE_CODES=[3550308,3304557]

# --- Worker Configuration ---
# The maximum number of concurrent messages the worker can process.
# Default: 4
WORKER_MAX_CONCURRENCY=4

# --- PostgreSQL Database Configuration ---
# These variables configure the connection to the PostgreSQL database.
# The default values are set for the local Docker Compose environment.
POSTGRES_DRIVER=postgresql
POSTGRES_ISOLATION_LEVEL=AUTOCOMMIT
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=public_detective

# (Optional) Specifies a specific schema to use within the database.
# This is primarily used by the test suite to isolate test runs.
# Default: None (uses the default public schema)
POSTGRES_DB_SCHEMA=

# --- PNCP API Configuration ---
# Endpoints for the National Public Procurement Portal (PNCP) APIs.
PNCP_PUBLIC_QUERY_API_URL=https://pncp.gov.br/api/consulta/v1/
PNCP_INTEGRATION_API_URL=https://pncp.gov.br/api/pncp/v1/

# The delay in seconds to wait between each outgoing HTTP request.
# This is used to prevent hitting API rate limits.
# Default: 0.5
HTTP_REQUEST_DELAY_SECONDS=0.5

# ==============================================================================
# Google Cloud Platform (GCP) Configuration
# ==============================================================================

# --- Core GCP Settings ---
# The GCP Project ID where the resources are located.
GCP_PROJECT=public-detective

# The GCP region for services like Vertex AI.
GCP_LOCATION=us-central1

# --- Emulator Hosts (for Local Development) ---
# To run against live GCP services, leave these variables blank or remove them.
# To use local emulators (via Docker Compose), set their hostnames.
GCP_PUBSUB_HOST=localhost:8085
GCP_GCS_HOST=http://localhost:8086
GCP_GEMINI_HOST=

# --- Google Cloud Storage (GCS) ---
# The name of the GCS bucket where procurement documents are stored.
GCP_GCS_BUCKET_PROCUREMENTS=procurements

# --- Google Cloud Pub/Sub ---
# The name of the main topic for procurement analysis messages.
GCP_PUBSUB_TOPIC_PROCUREMENTS=procurements

# (Optional) The name of the Dead-Letter Queue (DLQ) topic.
# If not set, it defaults to "{GCP_PUBSUB_TOPIC_PROCUREMENTS}-dlq".
GCP_PUBSUB_TOPIC_DLQ_PROCUREMENTS=

# (Optional) The name of the subscription for the main topic.
# If not set, it defaults to "{GCP_PUBSUB_TOPIC_PROCUREMENTS}-subscription".
GCP_PUBSUB_TOPIC_SUBSCRIPTION_PROCUREMENTS=

# --- Google Gemini API ---
# The specific Gemini model to be used for the analysis.
GCP_GEMINI_MODEL=gemini-2.5-pro

# The maximum number of tokens the model can generate in its response.
GCP_GEMINI_MAX_OUTPUT_TOKENS=65.535

# The maximum number of tokens the model can accept in its input.
GCP_GEMINI_MAX_INPUT_TOKENS=1048576

# The budget allocated for the "thinking" phase of the analysis, in tokens.
GCP_GEMINI_THINKING_BUDGET=32768

# --- Gemini API Pricing Configuration (in USD per 1 million tokens) ---
# These values reflect the detailed pricing model for the Gemini API.
# They are used for accurate cost estimation of the analysis.
# See the official Google Cloud Vertex AI pricing page for the most up-to-date information.
GCP_GEMINI_TEXT_INPUT_COST=7.750969275
GCP_GEMINI_TEXT_INPUT_LONG_COST=15.50193855
GCP_GEMINI_TEXT_OUTPUT_COST=62.0077542
GCP_GEMINI_TEXT_OUTPUT_LONG_COST=93.0116313
GCP_GEMINI_THINKING_OUTPUT_COST=62.0077542
GCP_GEMINI_THINKING_OUTPUT_LONG_COST=93.0116313
GCP_GEMINI_AUDIO_INPUT_COST=7.750969275
GCP_GEMINI_AUDIO_INPUT_LONG_COST=15.50193855
GCP_GEMINI_IMAGE_INPUT_COST=7.750969275
GCP_GEMINI_IMAGE_INPUT_LONG_COST=15.50193855
GCP_GEMINI_VIDEO_INPUT_COST=7.750969275
GCP_GEMINI_VIDEO_INPUT_LONG_COST=15.50193855

# --- Google Cloud Service Account Credentials for E2E Tests ---
# The content of the JSON file for the GCP service account.
# IMPORTANT: This variable is used exclusively by the E2E test suite (tests/e2e/)
# to create a temporary credentials file for authenticating with live GCP services.
# It is NOT used directly by the application's providers.
#
# In a production GCP environment, the application will automatically use
# the attached service account via Application Default Credentials (ADC).
#
# To get the JSON content:
# 1. Go to the GCP Console -> IAM & Admin -> Service Accounts.
# 2. Create a new service account or select an existing one.
# 3. Grant the "Vertex AI User", "Storage Admin", and "Pub/Sub Admin" roles.
# 4. Go to the "Keys" tab and create a new JSON key.
# 5. Copy the content of the downloaded JSON file and paste it here.
#
# Example: GCP_SERVICE_ACCOUNT_CREDENTIALS='{"type": "service_account", ...}'
GCP_SERVICE_ACCOUNT_CREDENTIALS=
