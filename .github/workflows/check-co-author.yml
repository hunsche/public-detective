name: Check for Co-author

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-co-author:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0 # We need all history for log

      - name: Check Jules' commits for valid co-author approval
        env:
          PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
        run: |
          set -e
          set -x

          # 1. Read CODEOWNERS and create a searchable list of usernames (without the '@')
          if [ ! -f .github/CODEOWNERS ]; then
            echo "::error::The .github/CODEOWNERS file does not exist."
            exit 1
          fi
          codeowners=$(cat .github/CODEOWNERS | grep -o -E '@[a-zA-Z0-9_-]+' | sed 's/@//g' | tr '\n' ' ')
          if [ -z "$codeowners" ]; then
            echo "::error::Could not find any code owners in .github/CODEOWNERS file."
            exit 1
          fi
          echo "Registered CODEOWNERS: ${codeowners}"

          merge_base=$(git merge-base origin/${PR_BASE_REF} HEAD)
          echo "Checking commits from ${merge_base} to HEAD"

          jules_commits=$(git log --author="Jules" --pretty=format:"%H" $merge_base..HEAD)

          if [ -z "$jules_commits" ]; then
            echo "No commits by Jules found in this PR. Check passes."
            exit 0
          fi

          echo "Found commits by Jules: ${jules_commits}"

          for commit in $jules_commits; do
            echo "--- Checking commit ${commit} ---"

            # 2. Find all 'Codeowner-approval' trailers in the commit body
            # The `|| true` prevents the script from exiting if grep finds no matches
            approvals=$(git show -s --format='%b' $commit | grep "Codeowner-approval:" || true)

            if [ -z "$approvals" ]; then
              echo "::error::Commit ${commit} by Jules is missing a 'Codeowner-approval' trailer."
              exit 1
            fi

            echo "Found approval trailers:
          ${approvals}"

            # 3. Extract usernames from the trailers
            approved_by_users=$(echo "$approvals" | grep -o -E '@[a-zA-Z0-9_-]+' | sed 's/@//g')

            # 4. Check if at least one of the approvers is a real code owner
            found_valid_codeowner=false
            for user in $approved_by_users; do
              # Check if the user is in the list of codeowners
              if [[ " $codeowners " =~ " $user " ]]; then
                echo "Valid approval found from code owner: @${user}"
                found_valid_codeowner=true
                break # Found one, no need to check others for this commit
              fi
            done

            if [ "$found_valid_codeowner" = false ]; then
              echo "::error::Commit ${commit} has approval trailers, but none are from a registered CODEOWNER."
              echo "Approved by: ${approved_by_users}"
              echo "Registered CODEOWNERS: ${codeowners}"
              exit 1
            fi
          done

          echo "All commits by Jules have a valid 'Codeowner-approval'. Check passes."
