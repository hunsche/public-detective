name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          poetry install

      - name: Run pre-commit checks
        run: |
          poetry run pre-commit run --all-files

      - name: Start services
        run: |
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until docker compose exec postgres pg_isready -U postgres -h localhost -p 5432; do
            sleep 2
          done
          echo "PostgreSQL is ready."

      - name: Run database migrations
        run: |
          poetry run alembic upgrade head

      - name: Generate SQL for migrations
        if: github.event_name == 'pull_request'
        run: |
          # Ensure we have the main branch available
          git fetch origin main:main
          # Get the HEAD revision of the main branch
          PREVIOUS_REV=$(poetry run alembic history -r main | head -n 1 | awk '{print $1}')
          # Generate the SQL diff
          poetry run alembic upgrade ${PREVIOUS_REV}:head --sql > migration.sql

      - name: Post SQL migration to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const migration = fs.readFileSync('migration.sql', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## SQL Migration\n\`\`\`sql\n${migration}\n\`\`\``
            })

      - name: Run tests
        run: |
          poetry run pytest
