name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/badges/**'
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

      - name: Configure Git for SSH
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git remote set-url origin git@github.com:${{ github.repository }}.git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          poetry install

      - name: Start services
        run: |
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until docker compose exec postgres pg_isready -U postgres -h localhost -p 5432; do
            sleep 2
          done
          echo "PostgreSQL is ready."

      - name: Run pre-commit checks
        run: |
          poetry run pre-commit run --all-files

      - name: Run database migrations
        run: |
          poetry run alembic upgrade head

      - name: Generate and Check SQL for Migrations
        if: github.event_name == 'pull_request'
        run: |
          set -e
          PR_HEAD_REV=$(poetry run alembic heads | awk '{print $1}')
          git checkout main
          MAIN_HEAD_REV=$(poetry run alembic heads | awk '{print $1}')
          git checkout -
          echo "Generating SQL from ${MAIN_HEAD_REV} to ${PR_HEAD_REV}..."
          poetry run alembic upgrade ${MAIN_HEAD_REV}:${PR_HEAD_REV} --sql > migration.sql
          # Check if the migration is empty (only contains BEGIN;, COMMIT;, and whitespace)
          # If grep finds any line that is NOT one of those, it exits 0, indicating content.
          if grep -qvE '^(BEGIN;|COMMIT;|\s*)$' migration.sql; then
              echo "SQL_HAS_CONTENT=true" >> "$GITHUB_ENV"
          else
              echo "SQL_HAS_CONTENT=false" >> "$GITHUB_ENV"
          fi

      - name: Post SQL migration to PR
        if: github.event_name == 'pull_request' && env.SQL_HAS_CONTENT == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const migration_body = fs.readFileSync('migration.sql', 'utf8');
            const body = `## SQL Migration\n\`\`\`sql\n${migration_body}\n\`\`\``;
            const comment_header = "## SQL Migration";

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existing_comment = comments.find(comment => comment.body.startsWith(comment_header));

            if (existing_comment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing_comment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Run tests and generate coverage report
        run: |
          poetry run pytest --cov=source --cov-report=xml --cov-report=term-missing --junitxml=junit.xml | tee pytest-coverage.txt

      - name: Coverage Comment
        if: github.event_name == 'pull_request'
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: pytest-coverage.txt
          junitxml-path: junit.xml
          title: Test Coverage
          badge-title: Coverage
          hide-badge: false
          hide-report: false
          create-new-comment: false
          hide-comment: false

      - name: Generate coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: tj-actions/coverage-badge-py@v2
        with:
          output: .github/badges/code-coverage.svg

      - name: Generate docstring coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          poetry run interrogate -v --fail-under 95 --generate-badge .github/badges/docstring-coverage.svg --badge-format svg

      - name: Commit and push coverage badges
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git add .github/badges/
          if git diff --staged --quiet; then
            echo "No changes to commit for coverage badges."
          else
            git commit -m "chore: update coverage badges"
            git push
          fi
